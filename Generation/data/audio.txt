Imagine you're playing with your box of toys. You have all sorts of toys: cars, dolls, blocks, and animals. Each one of them is an object. They have their own colors, sizes, shapes, and behaviours - that's what we call properties and methods in programming. Now, Object Oriented Programming or OOP, is like a rule set or a system which says that every thing in your toy box (program) is an object and must have its own properties and methods. This way, it becomes easy to organize and manage. For example, airport toys ought to fly, car toys ought to race, and animal toys ought to make sounds. You can also create new toys in OOP - that's called classes. Let's say, if you don't have a superhero toy, you can create one using similar attributes from your existing toys, like a human-shaped block with flying capabilities. Here, the human-shaped block is a class (blueprint), and superhero becomes an object (instance). It's all about keeping things organized, manageable, and reusable in our big, chaotic, yet beautiful world of programming. Just like how you'd manage your box of toys! That's Object Oriented Programming. Fancy name, simple concept!